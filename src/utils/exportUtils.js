// Export utilities for PagePop study sessions

// Export study notes as a comprehensive study guide
export const exportStudyGuide = (highlights, documentTitle = 'Study Session') => {
  const timestamp = new Date().toLocaleString();
  
  // Group highlights by page
  const highlightsByPage = highlights.reduce((acc, highlight) => {
    const page = highlight.pageNumber || 1;
    if (!acc[page]) acc[page] = [];
    acc[page].push(highlight);
    return acc;
  }, {});

  // Generate study guide content
  let studyGuide = `# 📚 PagePop Study Guide
## ${documentTitle}
Generated on: ${timestamp}
Total highlights: ${highlights.length}

---

`;

  // Add summary section
  const highlightsWithVoice = highlights.filter(h => h.voiceExplanations?.length > 0);
  const helpRequests = highlights.filter(h => h.needsHelp);
  
  studyGuide += `## 📊 Study Session Summary
- ✨ **Total Highlights**: ${highlights.length}
- 🎵 **Voice Explanations**: ${highlightsWithVoice.length}
- 🤚 **Help Requests**: ${helpRequests.length}
- 📖 **Pages Covered**: ${Object.keys(highlightsByPage).length}

---

`;

  // Add highlights by page
  Object.keys(highlightsByPage)
    .sort((a, b) => parseInt(a) - parseInt(b))
    .forEach(pageNum => {
      studyGuide += `## 📄 Page ${pageNum}\n\n`;
      
      highlightsByPage[pageNum]
        .sort((a, b) => a.position.y - b.position.y) // Sort by vertical position
        .forEach((highlight, index) => {
          studyGuide += `### ${index + 1}. "${highlight.text}"\n`;
          studyGuide += `- **Created**: ${new Date(highlight.createdAt).toLocaleString()}\n`;
          studyGuide += `- **Status**: ${getHighlightStatus(highlight)}\n`;
          
          // Add voice explanations
          if (highlight.voiceExplanations?.length > 0) {
            studyGuide += `- **🎵 Voice Explanations**: ${highlight.voiceExplanations.length}\n`;
            highlight.voiceExplanations.forEach((voice, vIndex) => {
              studyGuide += `  ${vIndex + 1}. Recorded by ${voice.recordedBy} on ${new Date(voice.recordedAt).toLocaleString()}\n`;
              if (voice.explanation) {
                studyGuide += `     "${voice.explanation}"\n`;
              }
            });
          }
          
          // Add help requests
          if (highlight.helpRequests?.length > 0) {
            studyGuide += `- **🤚 Help Requests**: ${highlight.helpRequests.length}\n`;
            highlight.helpRequests.forEach((help, hIndex) => {
              studyGuide += `  ${hIndex + 1}. ${help.title} (${new Date(help.requestedAt).toLocaleString()})\n`;
            });
          }
          
          studyGuide += `\n`;
        });
      
      studyGuide += `---\n\n`;
    });

  // Add footer
  studyGuide += `## 🚀 Generated by PagePop
Transform your static PDFs into collaborative learning spaces!

*This study guide contains all your highlights and collaborative explanations from your PagePop session.*
`;

  return studyGuide;
};

// Get highlight status description
const getHighlightStatus = (highlight) => {
  if (highlight.voiceExplanations?.length > 0) {
    return `✅ Has ${highlight.voiceExplanations.length} voice explanation${highlight.voiceExplanations.length > 1 ? 's' : ''}`;
  } else if (highlight.needsHelp) {
    return '🤚 Needs help';
  } else if (highlight.hasHelp) {
    return '💡 Help available';
  } else {
    return '📝 Highlighted';
  }
};

// Export highlights data as JSON
export const exportJSON = (highlights, documentTitle = 'Study Session') => {
  const exportData = {
    title: documentTitle,
    exportedAt: new Date().toISOString(),
    version: '1.0',
    highlights: highlights.map(highlight => ({
      ...highlight,
      // Convert audio blobs to data URLs for export
      voiceExplanations: highlight.voiceExplanations?.map(voice => ({
        ...voice,
        audioBlob: null, // Remove blob for JSON export
        hasAudio: !!voice.audioUrl
      })) || []
    })),
    stats: {
      totalHighlights: highlights.length,
      highlightsWithVoice: highlights.filter(h => h.voiceExplanations?.length > 0).length,
      helpRequests: highlights.filter(h => h.needsHelp).length,
      pagesCovered: [...new Set(highlights.map(h => h.pageNumber))].length
    }
  };

  return JSON.stringify(exportData, null, 2);
};

// Download file helper
export const downloadFile = (content, filename, mimeType = 'text/plain') => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  link.style.display = 'none';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up
  setTimeout(() => URL.revokeObjectURL(url), 1000);
};

// Export audio files as ZIP (simplified version - would need jszip library for full implementation)
export const exportAudioFiles = async (highlights, documentTitle = 'Study Session') => {
  const audioHighlights = highlights.filter(h => h.voiceExplanations?.length > 0);
  
  if (audioHighlights.length === 0) {
    throw new Error('No voice explanations to export');
  }

  // For now, create a text file listing all audio files
  let audioList = `# 🎵 Audio Explanations - ${documentTitle}\n`;
  audioList += `Generated on: ${new Date().toLocaleString()}\n\n`;
  
  audioHighlights.forEach((highlight, index) => {
    audioList += `## ${index + 1}. "${highlight.text}"\n`;
    audioList += `Page: ${highlight.pageNumber}\n`;
    
    highlight.voiceExplanations.forEach((voice, vIndex) => {
      audioList += `- Audio ${vIndex + 1}: ${voice.recordedBy} (${new Date(voice.recordedAt).toLocaleString()})\n`;
      audioList += `  Duration: ${voice.duration || 'Unknown'} seconds\n`;
      audioList += `  File: ${highlight.id}_${voice.id}.wav\n`;
    });
    audioList += `\n`;
  });
  
  audioList += `\nNote: Individual audio files would be included in the full export package.\n`;
  
  return audioList;
};

// Main export function
export const exportStudySession = async (highlights, documentTitle, exportType = 'study-guide') => {
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const safeTitle = documentTitle.replace(/[^a-zA-Z0-9]/g, '_');
  
  try {
    switch (exportType) {
      case 'study-guide':
        const studyGuide = exportStudyGuide(highlights, documentTitle);
        downloadFile(studyGuide, `${safeTitle}_StudyGuide_${timestamp}.md`, 'text/markdown');
        break;
        
      case 'json':
        const jsonData = exportJSON(highlights, documentTitle);
        downloadFile(jsonData, `${safeTitle}_Data_${timestamp}.json`, 'application/json');
        break;
        
      case 'audio-list':
        const audioList = await exportAudioFiles(highlights, documentTitle);
        downloadFile(audioList, `${safeTitle}_AudioList_${timestamp}.txt`, 'text/plain');
        break;
        
      default:
        throw new Error(`Unknown export type: ${exportType}`);
    }
    
    return true;
  } catch (error) {
    console.error('Export failed:', error);
    throw error;
  }
};